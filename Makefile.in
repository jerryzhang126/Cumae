#
# Cumae Makefile
#
# Copyright (c) 2016 Michelangelo De Simone <michel@ngelo.eu>
#
# This is meant to be included in all the individual
# Makefiles within the src/<something> directories.
#
# As this is a free project, you're free to mock around
# everything but only DEFINES, CFLAGS and LDFLAGS should
# be set in the subprojects Makefiles.
#
# TARGET __MUST__ be set and it should be a globally
# unique target name.
#
# Please see the LICENSE file for the licensing terms.
#
# TODO:
# 	Target for EEPROM flashing.
#

# Build parameters.
# These can be set and/or overridden.
DEFINES += -DF_CPU=8000000
CFLAGS += -Wall -pedantic -O
LDFLAGS += -Wl,-Map,$(FULLTARGETPATH).map

# Target MCU; this shouldn't be overridden in the individual
# Makefiles in src/<blah>.
MCU = atmega328p

# Flashing parameters.
FLASH_MCU = m328p
FLASH_PRG = atmelice_isp

# Directories.
#
# This obtains the absolute path of the Cumae repository by
# checking the real path of the last Makefile (which 
# should be Makefile.in).
REPOROOT := $(dir $(realpath $(lastword $(MAKEFILE_LIST))))

# Computes the final out directory.
REPOUT := $(REPOROOT)out/

# Where all the objects go to die.:)
OBJDIR := $(REPOUT)obj/

# Prefix, this is also relative to the root.
PREFIX = usr/local/avr/

# Convenience variable with full path of the target.
FULLTARGETPATH := $(REPOUT)$(TARGET)

# Add the toolchain absolute path to the PATH.
BINPATH := $(REPOUT)$(PREFIX)bin

# Toolchain.
AR = $(BINPATH)/avr-ar
CC = $(BINPATH)/avr-gcc
OC = $(BINPATH)/avr-objcopy
OD = $(BINPATH)/avr-objdump
AVRDUDE = $(BINPATH)/avrdude

# Targets and dependencies.
#
# List all the *.c files in the current directory and
# then replace the suffix from .c to .o.
FILENAME := $(patsubst %.c, %.o, $(wildcard *.c))

# libcumae build settings.
CUMAE_INCLUDE := $(REPOUT)cumae/include
CUMAE_LIB := $(REPOUT)cumae/lib
CUMAE_SRC := $(REPOROOT)src/libcumae

# The phony targets.
.PHONY: copy_cumae_headers clean flash

# This is the main "root" target. It's pretty obvious.;)
all: $(FULLTARGETPATH).elf $(FULLTARGETPATH).lst $(FULLTARGETPATH).hex \
	$(FULLTARGETPATH).srec $(FULLTARGETPATH).bin $(FULLTARGETPATH)_eeprom.hex\
	$(FULLTARGETPATH)_eeprom.srec $(FULLTARGETPATH)_eeprom.bin 

# These are the targets for libcumae.
#
# Copy exported headers.
copy_cumae_headers:
	mkdir -p $(CUMAE_INCLUDE)/cumae
	cp $(REPOROOT)src/libcumae/include/*.h $(CUMAE_INCLUDE)/cumae

# libcumae base; this is a temprary workaround as we only have one single
# source file. Check the TODO below.
$(CUMAE_LIB)/base.o: $(CUMAE_SRC)/base.c
	mkdir -p $(CUMAE_LIB)
	$(CC) -mmcu=$(MCU) $(CFLAGS) $(DEFINES) -I$(CUMAE_INCLUDE) $(LDFLAGS) $< -c -o $@

$(CUMAE_LIB)/libcumae.a: $(CUMAE_LIB)/base.o
	$(AR) rcs $@ $<

#
# TODO: Generalize the libcumae object generation.
#
## All the libcumae objects are prepended with cumae_ (eg.: cumae_base.o).
## libcumae/base (object).
#cumae_%.o: $(CUMAE_SRC)/%.c
#	$(CC) -mmcu=$(MCU) $(CFLAGS) $(DEFINES) -I$(CUMAE_INCLUDE) $(LDFLAGS) $< -c -o $@
#
##$(REPOUT)cumae/cumae_base.o: $(CUMAE_SRC)/base.c 
##	$(CC) -mmcu=$(MCU) $(CFLAGS) $(DEFINES) -I$(CUMAE_INCLUDE) $(LDFLAGS) $< -c -o $@
#
## libcumae (static library).
#$(CUMAE_LIB)/libcumae.a: $(CUMAE_OBJ_FILES)
#	mkdir -p $(CUMAE_LIB)
#	$(AR) rcs $@ $<

# To build a .o file we need its .c file, first.
#
%.o: %.c | copy_cumae_headers
	$(CC) -mmcu=$(MCU) $(CFLAGS) $(DEFINES) -I$(CUMAE_INCLUDE) $< -c -o $@

# This is the actual "main" target/dependency. Itself depends on the
# list of *.c files in the $(FILENAME) variable.
%.elf: $(FILENAME) $(CUMAE_LIB)/libcumae.a
	$(CC) -static -mmcu=$(MCU) $(CFLAGS) $(LDFLAGS) -L$(CUMAE_LIB) -lcumae $^ -o $@

# Disassembly.
%.lst: %.elf
	$(OD) -h -S $< > $@

# All the binary formats depend on the ELF target above.
%.hex: %.elf
	$(OC) -j .text -j .data -O ihex $< $@

%.srec: %.elf
	$(OC) -j .text -j .data -O srec $< $@

%.bin: %.elf
	$(OC) -j .text -j .data -O binary $< $@

# Same thing for the EEPROM targets.
%_eeprom.hex: %.elf
	$(OC) -j .eeprom --change-section-lma .eeprom=0 -O ihex $< $@

%_eeprom.srec: %.elf
	$(OC) -j .eeprom --change-section-lma .eeprom=0 -O srec $< $@

%_eeprom.bin: %.elf
	$(OC) -j .eeprom --change-section-lma .eeprom=0 -O binary $< $@

# Flash target. We use the ihex here.
flash: $(FULLTARGETPATH).hex
	$(AVRDUDE) -p $(FLASH_MCU) -c $(FLASH_PRG) \
		-U flash:w:$<:i

clean:
	rm -rf $(FULLTARGETPATH)*
	rm -rf $(FULLTARGETPATH)_eeprom.*
	rm -rf $(REPOUT)cumae/
